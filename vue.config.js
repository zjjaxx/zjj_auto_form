const MonacoWebpackPlugin = require("monaco-editor-webpack-plugin");
const CircularDependencyPlugin = require("circular-dependency-plugin");
module.exports = {
  configureWebpack: {
    plugins: [
      new MonacoWebpackPlugin(),
      new CircularDependencyPlugin({
        // `onStart` is called before the cycle detection starts
        onStart({ compilation }) {},
        // `onDetected` is called for each module that is cyclical
        onDetected({ module: webpackModuleRecord, paths, compilation }) {
          // `paths` will be an Array of the relative module paths that make up the cycle
          // `module` will be the module record generated by webpack that caused the cycle
          if (paths.some((path) => !/node_modules/.test(path))) {
            compilation.errors.push(new Error(paths.join(" -> ")));
          }
        },
        // `onEnd` is called before the cycle detection ends
        onEnd({ compilation }) {},
      }),
    ],
  },
};
